using System.Net;
using System.Net.Mail;

namespace Zdrav_I_SIlen.Services
{
    public interface IEmailService
    {
        Task SendPasswordResetEmailAsync(string toEmail, string resetToken, string userName);
        Task SendEmailAsync(string toEmail, string subject, string body);
    }

    public class EmailService : IEmailService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<EmailService> _logger;
        private readonly IWebHostEnvironment _environment;

        public EmailService(IConfiguration configuration, ILogger<EmailService> logger, IWebHostEnvironment environment)
        {
            _configuration = configuration;
            _logger = logger;
            _environment = environment;
        }

        public async Task SendPasswordResetEmailAsync(string toEmail, string resetToken, string userName)
        {
            var resetLink = $"{_configuration["EmailSettings:BaseUrl"]}/Account/ResetPassword?token={resetToken}";
            
            string subject = "–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞ - Zdrav I Silen";
            string body = $@"
                <html>
                <body>
                    <h2>–ó–¥—Ä–∞–≤–µ–π—Ç–µ, {userName}!</h2>
                    <p>–ü–æ–ª—É—á–∏–ª–∏ —Å—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª, –∑–∞—â–æ—Ç–æ —Å—Ç–µ –∑–∞—è–≤–∏–ª–∏ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞ –∑–∞ –≤–∞—à–∏—è –∞–∫–∞—É–Ω—Ç.</p>
                    <p>–ú–æ–ª—è, –∫–ª–∏–∫–Ω–µ—Ç–µ –≤—ä—Ä—Ö—É –ª–∏–Ω–∫–∞ –ø–æ-–¥–æ–ª—É, –∑–∞ –¥–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª–∞—Ç–∞ —Å–∏:</p>
                    <p><a href='{resetLink}' style='background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;'>–í—ä–∑—Å—Ç–∞–Ω–æ–≤–∏ –ø–∞—Ä–æ–ª–∞</a></p>
                    <p>–ò–ª–∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ –∏ –ø–æ—Å—Ç–∞–≤–µ—Ç–µ —Ç–æ–∑–∏ –ª–∏–Ω–∫ –≤ –±—Ä–∞—É–∑—ä—Ä–∞ —Å–∏:</p>
                    <p>{resetLink}</p>
                    <p><strong>–¢–æ–∑–∏ –ª–∏–Ω–∫ —â–µ –±—ä–¥–µ –≤–∞–ª–∏–¥–µ–Ω —Å–∞–º–æ 24 —á–∞—Å–∞.</strong></p>
                    <p>–ê–∫–æ –Ω–µ —Å—Ç–µ –∑–∞—è–≤–∏–ª–∏ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞, –º–æ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–∞–π—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª.</p>
                    <hr>
                    <p>–° —É–≤–∞–∂–µ–Ω–∏–µ,<br>–ï–∫–∏–ø—ä—Ç –Ω–∞ Zdrav I Silen</p>
                </body>
                </html>";

            await SendEmailAsync(toEmail, subject, body);
        }

        public async Task SendEmailAsync(string toEmail, string subject, string body)
        {
            try
            {
                // Validate email address
                if (string.IsNullOrWhiteSpace(toEmail) || !IsValidEmail(toEmail))
                {
                    throw new ArgumentException("Invalid email address", nameof(toEmail));
                }

                var smtpSettings = _configuration.GetSection("EmailSettings");
                
                var fromEmail = smtpSettings["FromEmail"];
                var fromName = smtpSettings["FromName"];
                var smtpServer = smtpSettings["SmtpServer"];
                var smtpPort = smtpSettings["SmtpPort"];
                var enableSsl = smtpSettings["EnableSsl"];
                var fromPassword = smtpSettings["FromPassword"];

                // Use mock mode only if configuration is missing or incomplete
                if (string.IsNullOrEmpty(fromEmail) || string.IsNullOrEmpty(fromPassword) || 
                    fromPassword == "your-app-password" || fromPassword == "PUT_YOUR_APP_PASSWORD_HERE")
                {
                    _logger.LogInformation($"""
                        üìß MOCK EMAIL (Development Mode - No valid email config):
                        To: {toEmail}
                        Subject: {subject}
                        Body: {body}
                        """);
                    
                    // Simulate email sending delay
                    await Task.Delay(1000);
                    return;
                }

                // Real email sending
                var fromAddress = new MailAddress(fromEmail, fromName ?? "Zdrav I Silen");
                var toAddress = new MailAddress(toEmail);
                
                using var smtp = new SmtpClient
                {
                    Host = smtpServer ?? "smtp.gmail.com",
                    Port = int.Parse(smtpPort ?? "587"),
                    EnableSsl = bool.Parse(enableSsl ?? "true"),
                    Credentials = new NetworkCredential(fromEmail, fromPassword),
                    Timeout = 30000 // 30 seconds timeout
                };

                using var message = new MailMessage(fromAddress, toAddress)
                {
                    Subject = subject,
                    Body = body,
                    IsBodyHtml = true
                };

                await smtp.SendMailAsync(message);
                _logger.LogInformation($"‚úÖ Email sent successfully to {toEmail}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"‚ùå Failed to send email to {toEmail}");
                throw;
            }
        }

        private static bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }
    }
} 